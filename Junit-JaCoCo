## 1. O que √© JUnit

JUnit √© um **framework de testes unit√°rios** para aplica√ß√µes Java. Ele permite criar e executar testes automatizados para verificar se o comportamento das classes e m√©todos est√° correto.

Um teste unit√°rio √© um pequeno programa que valida o funcionamento de uma parte espec√≠fica do c√≥digo ‚Äî normalmente um m√©todo.  
Com o JUnit, cada teste √© independente, simples e r√°pido de rodar, facilitando a identifica√ß√£o de erros logo no desenvolvimento.

### Principais caracter√≠sticas
- **Automa√ß√£o:** executa v√°rios testes de forma autom√°tica.
- **Assertivas:** usa m√©todos como `assertEquals`, `assertTrue`, `assertThrows` para validar resultados esperados.
- **Independ√™ncia:** cada teste roda isoladamente, garantindo que um erro n√£o contamine os outros.
- **Integra√ß√£o:** funciona bem com IDEs, pipelines de CI/CD e ferramentas de cobertura como o JaCoCo.

# JaCoCo ‚Äî Java Code Coverage

## O que √© JaCoCo

**JaCoCo (Java Code Coverage)** √© uma ferramenta usada para medir o **n√≠vel de cobertura de c√≥digo** alcan√ßado pelos testes automatizados em projetos Java.  
Ela informa **quais partes do c√≥digo foram executadas** durante os testes e **quais n√£o foram**, ajudando a identificar √°reas sem verifica√ß√£o.

Em termos simples: o JaCoCo mostra se voc√™ realmente testou tudo aquilo que acha que testou.

---

## Tipos de Cobertura

| Tipo | Descri√ß√£o |
|------|------------|
| **Cobertura de Linhas** | Mede quantas linhas de c√≥digo foram executadas. |
| **Cobertura de Branches** | Mede quantos caminhos de decis√£o (`if`, `else`, `switch`, etc.) foram testados. |
| **Cobertura de M√©todos** | Indica se todos os m√©todos foram chamados durante os testes. |
| **Cobertura de Classes** | Verifica se cada classe foi exercitada por pelo menos um teste. |

Essas m√©tricas aparecem em relat√≥rios com cores:
- üü© **Verde:** c√≥digo totalmente coberto.
- üü® **Amarelo:** parcialmente testado.
- üü• **Vermelho:** n√£o testado.

---

## Como o JaCoCo funciona

1. Durante a execu√ß√£o dos testes (por exemplo, com **JUnit**), o JaCoCo adiciona um **agente na JVM**.  
2. Esse agente monitora a execu√ß√£o e marca cada linha de c√≥digo visitada.  
3. Ap√≥s os testes, ele gera um **relat√≥rio detalhado** mostrando a porcentagem de cobertura.  
